from flask import Flask, jsonify, send_file
import pandas as pd
import io
import base64
import matplotlib.pyplot as plt


# Criar o app
app = Flask(__name__)

#arquivo = 'D:/python2/01_base_vendas.xlsx'
arquivo = 'C:/Users/noturno/Desktop/python2/01_base_vendas.xlsx'

df1 = pd.read_excel(arquivo, sheet_name='Relatório de Vendas')
df2 = pd.read_excel(arquivo, sheet_name='Relatório de Vendas1')

df_consolidado = pd.concat([df1, df2], ignore_index=True)
@app.route('/')
def pagina_inicial():
    conteudo = '''
    <style>
        a{
            display: inline-block;
            padding: 10px 20px;
            margin: 5px 0;
            text-decoration: none;
            color: white;
            border-radius: 5px;
            text-align: center;
            background-color: #4caf50;
            transition: 0.3s;
            min-width: 200px;
            min-height: 20px;
        }
    </style>
    <h1>API de análise de Dados de Vendas</h1>
    <h2>Use as rotas para obter análises</h2>
    <a href='/'>Página Inicial</a><br/>
    <a href='/clientes_por_cidades'>Clientes por cidades</a><br/>
    <a href='/vendas_por_plano'>Vendas por Plano</a><br/>
    <a href='/top_cidades'>Top 3 Cidades</a><br/>
    <a href='/download/excel'>Download em Excel</a><br/>
    <a href='/download/csv'>Download em CSV</a><br/>
    <a href='/grafico_pizza'>Gráfico de Pizza</a><br/>
    <a href='/grafico_barras'>Gráfico de Barras</a><br/>
    <br/>
    <a href='mailto:kio199@gmail.com'>Email de Contato</a>
    '''
    return conteudo

@app.route('/clientes_por_cidades')
def clientes_por_cidades():
    clientes_por_cidades = df_consolidado.groupby('Cidade')['Cliente'].nunique().sort_values(ascending=False)
    return jsonify(clientes_por_cidades.to_dict())

@app.route('/vendas_por_plano')
def vendas_por_plano():
    vendas_por_plano = df_consolidado.groupby('Plano Vendido')['Cliente'].count()
    return jsonify(vendas_por_plano.to_dict())

@app.route('/top_cidades')
def top_cidades():
    clientes_por_cidades = df_consolidado.groupby('Cidade')['Cliente'].nunique().sort_values(ascending=False)
    top_3_cidades = clientes_por_cidades.head(3)
    return jsonify(top_3_cidades.to_dict())

@app.route('/download/csv')
def download_csv():
    caminho_csv = 'C:/Users/noturno/Desktop/python2/arquivo_csv.csv'
    df_consolidado.to_csv(caminho_csv, index=False)
    return jsonify({"message": "Download do arquivo CSV disponível!", "file_path": caminho_csv, "Autor": "Instrutor"})

@app.route('/download/excel')
def download_excel():
    caminho_excel = 'C:/Users/noturno/Desktop/python2/arquivo_excel.xlsx'
    df_consolidado.to_excel(caminho_excel, index=False)
    return f"<a href='{caminho_excel}'>Iniciar Download</a>"

# Gráfico de Barras
@app.route('/grafico_barras')
def grafico_barras():
    vendas_por_plano = df_consolidado['Plano Vendido'].value_counts()

    # Criar o gráfico de barras
    fig, ax = plt.subplots()
    vendas_por_plano.plot(kind='bar', ax=ax, color=['#66b3ff', '#99ff99'])
    ax.set_title('Gráfico de Vendas por Plano')
    ax.set_xlabel('Plano')
    ax.set_ylabel('Número de Vendas')

    # Salvar o gráfico em um objeto de memória
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)

    # Retornar a imagem como resposta
    return send_file(img, mimetype='image/png')

@app.route('/grafico_pizza')
def grafico_pizza():
    vendas_por_plano = df_consolidado['Plano Vendido'].value_counts()

    # Criar o gráfico de pizza
    fig, ax = plt.subplots()
    vendas_por_plano.plot(kind='pie', ax=ax, autopct='%1.1f%%', colors=['#66b3ff', '#99ff99'], startangle=90)
    ax.set_title('Gráfico de Vendas por Plano')

    # Salvar o gráfico em um objeto de memória
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)

    # Retornar a imagem como resposta
    return send_file(img, mimetype='image/png')

# Rodar a aplicação Flask
if __name__ == '__main__':
    app.run(debug=True)
